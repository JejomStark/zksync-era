#!/usr/bin/env bash
set -eo pipefail

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
ZKT_DIR=${ZKT_DIR:-"$BASE_DIR/.zkt"}
ZKT_BIN_DIR="$ZKT_DIR/bin"

ZKUP_SKIP_ZK_SUPERVISOR=0

BINS=(zk_inception zk_supervisor)

main() {
  say "Installing zk_toolbox"

  check_prerequisites
  parse_args "$@"
  mkdir -p "$ZKT_BIN_DIR"

  if [ -n "$ZKUP_PATH" ]; then
    install_local
  else
    install_from_repo
  fi

  say "zk_toolbox installed successfully"
}

PREREQUISITES=(cargo git)

check_prerequisites() {
  say "Checking prerequisites"

  failed_prerequisites=()
  for prerequisite in "${PREREQUISITES[@]}"; do
    if ! check_prerequisite "$prerequisite"; then
      failed_prerequisites+=("$prerequisite")
    fi
  done
  if [ ${#failed_prerequisites[@]} -gt 0 ]; then
    err "The following prerequisites are missing: ${failed_prerequisites[*]}"
    exit 1
  fi
}

check_prerequisite() {
  command -v "$1" &>/dev/null
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    --)
      shift
      break
      ;;

    -p | --path)
      shift
      ZKUP_PATH=$1
      ;;
    -r | --repo)
      shift
      ZKUP_REPO=$1
      ;;
    -b | --branch)
      shift
      ZKUP_BRANCH=$1
      ;;
    -c | --commit)
      shift
      ZKUP_COMMIT=$1
      ;;
    -v | --version)
      shift
      ZKUP_VERSION=$1
      ;;
    --skip-zk-supervisor) ZKUP_SKIP_ZK_SUPERVISOR=1 ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      err "Unknown argument: $1"
      usage
      exit 1
      ;;
    esac
    shift
  done
}

usage() {
  cat 1>&2 <<EOF
zkup - zkup installer
Usage placeholder
EOF
}

install_local() {
  if [ ! -d "$ZKUP_PATH/zk_toolbox" ]; then
    err "Path $ZKUP_PATH does not contain zk_toolbox"
    exit 1
  fi

  if [ -n "$ZKUP_BRANCH" ] || [ -n "$ZKUP_COMMIT" ] || [ -n "$ZKUP_VERSION" ] || [ -n "$ZKUP_REPO" ]; then
    warn "Ignoring --repo, --branch, --commit and --version arguments when installing from local path"
  fi

  say "Installing zk_toolbox from $ZKUP_PATH"
  ensure cd "$ZKUP_PATH"/zk_toolbox

  if [ $ZKUP_SKIP_ZK_SUPERVISOR -eq 1 ]; then
    BINS=(zk_inception)
  fi

  for bin in "${BINS[@]}"; do
    say "Installing $bin"
    ensure_spinner cargo install --root $ZKT_DIR --path ./crates/$bin --force
  done
}

install_from_repo() {
  if [ -n "$ZKUP_PATH" ]; then
    warn "Ignoring --path argument when installing from repository"
  fi

  ZKUP_REPO=${ZKUP_REPO:-"matter-labs/zksync-era"}

  say "Installing zk_toolbox from $ZKUP_REPO"

  if [ $ZKUP_SKIP_ZK_SUPERVISOR -eq 1 ]; then
    BINS=(zk_inception)
  fi

  if [ -n "$ZKUP_VERSION" ]; then
    if [ -n "$ZKUP_COMMIT" ] || [ -n "$ZKUP_BRANCH" ]; then
      warn "Ignoring --commit and --branch arguments when installing by version"
    fi
    ensure cargo install --root $ZKT_DIR --git "https://github.com/$ZKUP_REPO" --tag "zk_toolbox-v$ZKUP_VERSION" --locked "${BINS[@]}" --force
  elif [ -n "$ZKUP_COMMIT" ]; then
    if [ -n "$ZKUP_BRANCH" ]; then
      warn "Ignoring --branch argument when installing by commit"
    fi
    ensure cargo install --root $ZKT_DIR --git "https://github.com/$ZKUP_REPO" --rev "$ZKUP_COMMIT" --locked "${BINS[@]}" --force
  elif [ -n "$ZKUP_BRANCH" ]; then
    ensure cargo install --root $ZKT_DIR --git "https://github.com/$ZKUP_REPO" --branch "$ZKUP_BRANCH" --locked "${BINS[@]}" --force
  else
    ensure cargo install --root $ZKT_DIR --git "https://github.com/$ZKUP_REPO" --locked "${BINS[@]}" --force
  fi
}

ensure() {
  if ! "$@" >/dev/null 2>&1; then
    err "command failed: $*"
    exit 1
  fi
}

ensure_spinner() {
  local cmd="$*"
  "$@" >/dev/null 2>&1 &
  local pid=$!
  local status

  spinner $pid

  wait $pid
  status=$?

  if [ $status -ne 0 ]; then
    err "command failed: $cmd"
    exit 1
  fi
}

say() {
  local action=$(echo "$1" | awk '{print $1}')
  local rest=$(echo "$1" | sed 's/^[^ ]* //')

  echo -e "\033[1;32m$action\033[0m $rest"
}

warn() {
  echo -e "\033[1;33mWARNING: $1\033[0m"
}

err() {
  echo -e "\033[1;31mERROR: $1\033[0m" >&2
}

spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\'
  local i=0

  tput civis

  while kill -0 "$pid" 2>/dev/null; do
    i=$(((i + 1) % 4))
    printf "\r[%c] " "${spinstr:$i:1}"
    sleep $delay
  done

  tput cnorm
  printf "\r    \r"
}

main "$@"
